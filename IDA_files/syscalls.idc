//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2011 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-327F-7274-B7                      |
// |                            ESET spol. s r.o.                            |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  Enums();              // enumerations
 }

static Enums_0(id) {

	id = AddEnum(-1,"SysCall",0x1100000);
	AddConstEx(id,"trcv_msg",	0X54,	-1);
	SetConstCmt(GetConstEx(id,0X54,0,-1),"Receive Message from Mailbox with Timeout",1);
	AddConstEx(id,"twai_sem",	0X55,	-1);
	SetConstCmt(GetConstEx(id,0X55,0,-1),"Wait on Semaphore with Timreout",1);
	AddConstEx(id,"twai_flg",	0X56,	-1);
	SetConstCmt(GetConstEx(id,0X56,0,-1),"Wait for Eventflag (with Timeout)",1);
	AddConstEx(id,"tget_blf",	0X59,	-1);
	SetConstCmt(GetConstEx(id,0X59,0,-1),"Get Fixed-Size Memory Block",1);
	AddConstEx(id,"rel_blk",	0X71,	-1);
	SetConstCmt(GetConstEx(id,0X71,0,-1),"Release Variable-Size Memory Block",1);
	AddConstEx(id,"get_blk",	0X73,	-1);
	SetConstCmt(GetConstEx(id,0X73,0,-1),"Get Variable-Size Memory Block",1);
	AddConstEx(id,"ref_mpl",	0X74,	-1);
	SetConstCmt(GetConstEx(id,0X74,0,-1),"Reference Variable-Size Memorypool Status",1);
	AddConstEx(id,"prcv_msg",	0X94,	-1);
	SetConstCmt(GetConstEx(id,0X94,0,-1),"Poll and Receive Message from Mailbox",1);
	AddConstEx(id,"preq_sem",	0X95,	-1);
	SetConstCmt(GetConstEx(id,0X95,0,-1),"Poll and request Semaphore",1);
	AddConstEx(id,"poi_flg",	0X96,	-1);
	SetConstCmt(GetConstEx(id,0X96,0,-1),"Wait for Eventflag (polling)",1);
	AddConstEx(id,"pget_blk",	0X98,	-1);
	SetConstCmt(GetConstEx(id,0X98,0,-1),"Poll and Get Variable-Size Memory Block",1);
	AddConstEx(id,"pget_blf",	0X99,	-1);
	SetConstCmt(GetConstEx(id,0X99,0,-1),"Poll and Get Fixed-Size Memory Block",1);
	AddConstEx(id,"act_cyc",	0XA2,	-1);
	SetConstCmt(GetConstEx(id,0XA2,0,-1),"Active Cyclic Handler",1);
	AddConstEx(id,"ret_tmr",	0XA3,	-1);
	SetConstCmt(GetConstEx(id,0XA3,0,-1),"Return from Timer Handler",1);
	AddConstEx(id,"ref_cyc",	0XA4,	-1);
	SetConstCmt(GetConstEx(id,0XA4,0,-1),"Reference Cyclic Handler Status",1);
	AddConstEx(id,"ref_alm",	0XA5,	-1);
	SetConstCmt(GetConstEx(id,0XA5,0,-1),"Reference Alarm Handler Status",1);
	AddConstEx(id,"def_cyc",	0XA6,	-1);
	SetConstCmt(GetConstEx(id,0XA6,0,-1),"Define Cyclic Handler",1);
	AddConstEx(id,"def_alm",	0XA7,	-1);
	SetConstCmt(GetConstEx(id,0XA7,0,-1),"Define Alarm Handler",1);
	AddConstEx(id,"dly_tsk",	0XAB,	-1);
	SetConstCmt(GetConstEx(id,0XAB,0,-1),"Delay Task",1);
	AddConstEx(id,"get_tim",	0XAC,	-1);
	SetConstCmt(GetConstEx(id,0XAC,0,-1),"Get System Clock",1);
	AddConstEx(id,"set_tim",	0XAD,	-1);
	SetConstCmt(GetConstEx(id,0XAD,0,-1),"Set System Clock",1);
	AddConstEx(id,"rel_blf",	0XB1,	-1);
	SetConstCmt(GetConstEx(id,0XB1,0,-1),"Release Fixed-Size Memory Block",1);
	AddConstEx(id,"get_blf",	0XB3,	-1);
	SetConstCmt(GetConstEx(id,0XB3,0,-1),"Get Fixed-Sized Memory Block",1);
	AddConstEx(id,"ref_mpf",	0XB4,	-1);
	SetConstCmt(GetConstEx(id,0XB4,0,-1),"Reference Fixed-Size Memorypool Status",1);
	AddConstEx(id,"ret_int",	0XBB,	-1);
	SetConstCmt(GetConstEx(id,0XBB,0,-1),"Return from Interrupt Handler",1);
	AddConstEx(id,"ref_ilm",	0XBC,	-1);
	SetConstCmt(GetConstEx(id,0XBC,0,-1),"Reference Interrupt Level Mask",1);
	AddConstEx(id,"chg_ilm",	0XBD,	-1);
	SetConstCmt(GetConstEx(id,0XBD,0,-1),"Change Interrupt Level Mask",1);
	AddConstEx(id,"snd_msg",	0XC1,	-1);
	SetConstCmt(GetConstEx(id,0XC1,0,-1),"Send Message to Mailbox",1);
	AddConstEx(id,"rcv_msg",	0XC3,	-1);
	SetConstCmt(GetConstEx(id,0XC3,0,-1),"Receive Message from Mailbox",1);
	AddConstEx(id,"ref_mbx",	0XC4,	-1);
	SetConstCmt(GetConstEx(id,0XC4,0,-1),"Reference Mailbox Status",1);
	AddConstEx(id,"sig_sem",	0XC9,	-1);
	SetConstCmt(GetConstEx(id,0XC9,0,-1),"Signal Semaphore",1);
	AddConstEx(id,"wai_sem",	0XCB,	-1);
	SetConstCmt(GetConstEx(id,0XCB,0,-1),"Wait on Semaphore",1);
	AddConstEx(id,"ref_sem",	0XCC,	-1);
	SetConstCmt(GetConstEx(id,0XCC,0,-1),"Reference Semaphonre Status",1);
	AddConstEx(id,"set_flg",	0XD0,	-1);
	SetConstCmt(GetConstEx(id,0XD0,0,-1),"Set Eventflag",1);
	AddConstEx(id,"clr_flg",	0XD1,	-1);
	SetConstCmt(GetConstEx(id,0XD1,0,-1),"Clear Eventflag",1);
	AddConstEx(id,"wai_flg",	0XD2,	-1);
	SetConstCmt(GetConstEx(id,0XD2,0,-1),"Wait for Eventflag",1);
	AddConstEx(id,"ref_flg",	0XD4,	-1);
	SetConstCmt(GetConstEx(id,0XD4,0,-1),"Reference Eventflag Status",1);
	AddConstEx(id,"can_wup",	0XD8,	-1);
	SetConstCmt(GetConstEx(id,0XD8,0,-1),"Cancel Wakeup Request",1);
	AddConstEx(id,"wup_tsk",	0XD9,	-1);
	SetConstCmt(GetConstEx(id,0XD9,0,-1),"Wakeup Other Task",1);
	AddConstEx(id,"slp_tsk",	0XDA,	-1);
	SetConstCmt(GetConstEx(id,0XDA,0,-1),"Sleep Task",1);
	AddConstEx(id,"tslp_tsk",	0XDB,	-1);
	SetConstCmt(GetConstEx(id,0XDB,0,-1),"Sleep Task with Timeout",1);
	AddConstEx(id,"frsm_tsk",	0XDC,	-1);
	SetConstCmt(GetConstEx(id,0XDC,0,-1),"Forcibly Resume suspended Task",1);
	AddConstEx(id,"rsm_tsk",	0XDD,	-1);
	SetConstCmt(GetConstEx(id,0XDD,0,-1),"Resume Suspended Task",1);
	AddConstEx(id,"sus_tsk",	0XDF,	-1);
	SetConstCmt(GetConstEx(id,0XDF,0,-1),"Suspend Other Task",1);
	AddConstEx(id,"rel_qai",	0XE1,	-1);
	SetConstCmt(GetConstEx(id,0XE1,0,-1),"Release Wait of Other Task",1);
	AddConstEx(id,"dis_dsp",	0XE2,	-1);
	SetConstCmt(GetConstEx(id,0XE2,0,-1),"Disable Dispatch",1);
	AddConstEx(id,"ena_dsp",	0XE3,	-1);
	SetConstCmt(GetConstEx(id,0XE3,0,-1),"Enable Dispatch",1);
	AddConstEx(id,"rot_rdq",	0XE4,	-1);
	SetConstCmt(GetConstEx(id,0XE4,0,-1),"Rotate Tasks on the Ready Queue",1);
	AddConstEx(id,"chg_pri",	0XE5,	-1);
	SetConstCmt(GetConstEx(id,0XE5,0,-1),"Change Task Priority",1);
	AddConstEx(id,"ter_tsk",	0XE7,	-1);
	SetConstCmt(GetConstEx(id,0XE7,0,-1),"Terminate Other Task",1);
	AddConstEx(id,"get_tid",	0XE8,	-1);
	SetConstCmt(GetConstEx(id,0XE8,0,-1),"Get Task Identifier",1);
	AddConstEx(id,"sta_tsk",	0XE9,	-1);
	SetConstCmt(GetConstEx(id,0XE9,0,-1),"Start Task",1);
	AddConstEx(id,"ext_tsk",	0XEB,	-1);
	SetConstCmt(GetConstEx(id,0XEB,0,-1),"Exit Issuing Task",1);
	AddConstEx(id,"ref_tsk",	0XEC,	-1);
	SetConstCmt(GetConstEx(id,0XEC,0,-1),"Reference Task Status",1);
	AddConstEx(id,"get_ver",	0XF0,	-1);
	SetConstCmt(GetConstEx(id,0XF0,0,-1),"Get Version Information",1);
	AddConstEx(id,"ref_sys",	0XF4,	-1);
	SetConstCmt(GetConstEx(id,0XF4,0,-1),"Reference System Status",1);
	AddConstEx(id,"_loc_cpu",	0XF8,	-1);
	SetConstCmt(GetConstEx(id,0XF8,0,-1),"Lock CPU",1);
	AddConstEx(id,"unl_cpu",	0XF9,	-1);
	SetConstCmt(GetConstEx(id,0XF9,0,-1),"Unlock CPU",1);
	AddConstEx(id,"twai_flg_l",	0XFFFFFF56,	-1);
	SetConstCmt(GetConstEx(id,0XFFFFFF56,0,-1),"Wait for Eventflag (with Timeout)",1);
	AddConstEx(id,"tget_blg_l",	0XFFFFFF59,	-1);
	SetConstCmt(GetConstEx(id,0XFFFFFF59,0,-1),"Get Fixed-Size Memory Block",1);
	id = AddEnum(-1,"SysErrorCode",0x1100000);
	AddConstEx(id,"E_OK",	0,	-1);
	AddConstEx(id,"E_RLWAI",	0XAA,	-1);
	SetConstCmt(GetConstEx(id,0XAA,0,-1),"WAIT state forced release",1);
	AddConstEx(id,"E_TMOUT",	0XAB,	-1);
	SetConstCmt(GetConstEx(id,0XAB,0,-1),"Polling failure or timeout",1);
	AddConstEx(id,"E_QOVR",	0XB7,	-1);
	SetConstCmt(GetConstEx(id,0XB7,0,-1),"Queuing or nesting overflow",0);
	AddConstEx(id,"E_CTX",	0XBB,	-1);
	SetConstCmt(GetConstEx(id,0XBB,0,-1),"Context error",1);
	AddConstEx(id,"E_OBJ",	0XC1,	-1);
	SetConstCmt(GetConstEx(id,0XC1,0,-1),"Other error regarding status of object",1);
	AddConstEx(id,"E_NOEXS",	0XCC,	-1);
	SetConstCmt(GetConstEx(id,0XCC,0,-1),"Object does not exist",0);
	AddConstEx(id,"E_ID",	0XDD,	-1);
	SetConstCmt(GetConstEx(id,0XDD,0,-1),"Illegal ID number",1);
	AddConstEx(id,"E_PAR",	0XDF,	-1);
	SetConstCmt(GetConstEx(id,0XDF,0,-1),"General parameter error",1);
	AddConstEx(id,"E_RSATR",	0XEB,	-1);
	SetConstCmt(GetConstEx(id,0XEB,0,-1),"Reserved attribute",1);
	AddConstEx(id,"E_RSFN",	0XEC,	-1);
	SetConstCmt(GetConstEx(id,0XEC,0,-1),"Reserved function code number",1);
	AddConstEx(id,"E_NOSPT",	0XEF,	-1);
	SetConstCmt(GetConstEx(id,0XEF,0,-1),"Unsupported function",1);
	AddConstEx(id,"E_NOMEM",	0XF6,	-1);
	SetConstCmt(GetConstEx(id,0XF6,0,-1),"Not Enough Memory",1);
	
	id = AddEnum(-1,"TaskState",0x1100000);
	SetEnumBf(id,1);
	AddConstEx(id,"TTS_RUN",	0X1,	0x1);
	AddConstEx(id,"TTS_RDY",	0X2,	0x2);
	AddConstEx(id,"TTS_WAI",	0X4,	0x4);
	AddConstEx(id,"TTS_SUS",	0X8,	0x8);
	AddConstEx(id,"TTS_DMT",	0X10,	0x10);
	id = AddEnum(-1,"WaitEventFlagMode",0x1100000);
	SetEnumBf(id,1);
	AddConstEx(id,"TWF_CLR",	0X1,	0x1);
	AddConstEx(id,"TWF_AND",	0,	0x2);
	AddConstEx(id,"TWF_ORW",	0X2,	0x2);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
	id = Enums_0(id);
        EndTypeUpdating(UTP_ENUM);
}



