//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2011 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-327F-7274-B7                      |
// |                            ESET spol. s r.o.                            |
// +-------------------------------------------------------------------------+
//
//
//      This file contains the user-defined type definitions.
//      To use it press F2 in IDA and enter the name of this file.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  Enums();              // enumerations
 }

static Enums_0(id) {

	id = AddEnum(-1,"PTP_ResponceCodes",0x1100000);
	AddConstEx(id,"PTP_RC_OK",	0X2001,	-1);
	AddConstEx(id,"PTP_RC_GeneralError",	0X2002,	-1);
	AddConstEx(id,"PTP_RC_SessionNotOpen",	0X2003,	-1);
	AddConstEx(id,"PTP_RC_InvalidTransactionID",	0X2004,	-1);
	AddConstEx(id,"PTP_RC_OperationNotSupported",	0X2005,	-1);
	AddConstEx(id,"PTP_RC_ParameterNotSupported",	0X2006,	-1);
	AddConstEx(id,"PTP_RC_IncompleteTransfer",	0X2007,	-1);
	AddConstEx(id,"PTP_RC_InvalidStorageId",	0X2008,	-1);
	AddConstEx(id,"PTP_RC_InvalidObjectHandle",	0X2009,	-1);
	AddConstEx(id,"PTP_RC_DevicePropNotSupported",	0X200A,	-1);
	AddConstEx(id,"PTP_RC_InvalidObjectFormatCode",	0X200B,	-1);
	AddConstEx(id,"PTP_RC_StoreFull",	0X200C,	-1);
	AddConstEx(id,"PTP_RC_ObjectWriteProtected",	0X200D,	-1);
	AddConstEx(id,"PTP_RC_StoreReadOnly",	0X200E,	-1);
	AddConstEx(id,"PTP_RC_AccessDenied",	0X200F,	-1);
	AddConstEx(id,"PTP_RC_NoThumbnailPresent",	0X2010,	-1);
	AddConstEx(id,"PTP_RC_SelfTestFailed",	0X2011,	-1);
	AddConstEx(id,"PTP_RC_PartialDeletion",	0X2012,	-1);
	AddConstEx(id,"PTP_RC_StoreNotAvailable",	0X2013,	-1);
	AddConstEx(id,"PTP_RC_SpecificationByFormatUnsupported",	0X2014,	-1);
	AddConstEx(id,"PTP_RC_NoValidObjectInfo",	0X2015,	-1);
	AddConstEx(id,"PTP_RC_InvalidCodeFormat",	0X2016,	-1);
	AddConstEx(id,"PTP_RC_UnknownVendorCode",	0X2017,	-1);
	AddConstEx(id,"PTP_RC_CaptureAlreadyTerminated",	0X2018,	-1);
	AddConstEx(id,"PTP_RC_DeviceBusy",	0X2019,	-1);
	AddConstEx(id,"PTP_RC_InvalidParentObject",	0X201A,	-1);
	AddConstEx(id,"PTP_RC_InvalidDevicePropFormat",	0X201B,	-1);
	AddConstEx(id,"PTP_RC_InvalidDevicePropValue",	0X201C,	-1);
	AddConstEx(id,"PTP_RC_InvalidParameter",	0X201D,	-1);
	AddConstEx(id,"PTP_RC_SessionAlreadyOpened",	0X201E,	-1);
	AddConstEx(id,"PTP_RC_TransactionCanceled",	0X201F,	-1);
	AddConstEx(id,"PTP_RC_SpecificationOfDestinationUnsupported",	0X2020,	-1);
	AddConstEx(id,"PTP_RC_NIKON_HardwareError",	0XA001,	-1);
	AddConstEx(id,"PTP_RC_NIKON_OutOfFocus",	0XA002,	-1);
	AddConstEx(id,"PTP_RC_NIKON_ChangeCameraModeFailed",	0XA003,	-1);
	AddConstEx(id,"PTP_RC_NIKON_InvalidStatus",	0XA004,	-1);
	AddConstEx(id,"PTP_RC_NIKON_SetPropertyNotSupported",	0XA005,	-1);
	AddConstEx(id,"PTP_RC_NIKON_WbResetError",	0XA006,	-1);
	AddConstEx(id,"PTP_RC_NIKON_DustReferenceError",	0XA007,	-1);
	AddConstEx(id,"PTP_RC_NIKON_ShutterSpeedBulb",	0XA008,	-1);
	AddConstEx(id,"PTP_RC_NIKON_MirrorUpSequence",	0XA009,	-1);
	AddConstEx(id,"PTP_RC_NIKON_CameraModeNotAdjustFNumber",	0XA00A,	-1);
	AddConstEx(id,"PTP_RC_NIKON_NotLiveView",	0XA00B,	-1);
	AddConstEx(id,"PTP_RC_NIKON_MfDriveStepEnd",	0XA00C,	-1);
	AddConstEx(id,"PTP_RC_NIKON_MfDrive_Step_Insufficient",	0XA00E,	-1);
	AddConstEx(id,"PTP_RC_NIKON_Store_Error",	0XA021,	-1);
	AddConstEx(id,"PTP_RC_NIKON_Store_Unformatted",	0XA022,	-1);
	AddConstEx(id,"PTP_RC_MTP_Undefined",	0XA800,	-1);
	AddConstEx(id,"PTP_RC_MTP_Invalid_ObjectPropCode",	0XA801,	-1);
	AddConstEx(id,"PTP_RC_MTP_Invalid_ObjectProp_Format",	0XA802,	-1);
	AddConstEx(id,"PTP_RC_MTP_Invalid_ObjectProp_Value",	0XA803,	-1);
	AddConstEx(id,"PTP_RC_MTP_Invalid_ObjectReference",	0XA804,	-1);
	AddConstEx(id,"PTP_RC_MTP_Invalid_Dataset",	0XA806,	-1);
	AddConstEx(id,"PTP_RC_MTP_Specification_By_Group_Unsupported",	0XA807,	-1);
	AddConstEx(id,"PTP_RC_MTP_Specification_By_Depth_Unsupported",	0XA808,	-1);
	AddConstEx(id,"PTP_RC_MTP_Object_Too_Large",	0XA809,	-1);
	AddConstEx(id,"PTP_RC_MTP_ObjectProp_Not_Supported",	0XA80A,	-1);

	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
	id = Enums_0(id);
        EndTypeUpdating(UTP_ENUM);
}



